@page "/editproducts"


<MudContainer  MaxWidth="MaxWidth.False"   Style="overflow: auto; height: 100vh;">
    <MudText Class="mt-4" Typo="Typo.h3" Align="Align.Center" GutterBottom="true">📦 Gerenciar Produtos.</MudText>
    <MudText Class="mb-6" Align="Align.Center">Adicione um novo produto clicando no botão "Adicionar", logo abaixo.</MudText>





    <MudTable T="Product" Items="@products"
    Filter="Search"
    @ref="mudTable"
    Loading="@_loading"
    Hover="true" Dense="true" Bordered="true"
    MultiSelection="true"
    RowEditCommit="SaveEditionProduct"
    Class="tableEdit"
    @bind-SelectedItems="selectedItems"
    EditTrigger="TableEditTrigger.EditButton"
    EditButtonPosition="TableEditButtonPosition.End">




        <ToolBarContent>

            <div class="InputContainer ma-5">
                <input type="text" placeholder="Procurar..."
                @bind="criterion"
                name="text" class="searchinput" id="input">
                <div class="border"></div>

                <label for="input" class="labelforsearch">
                    <svg viewBox="0 0 512 512" class="searchIcon"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"></path></svg>
                </label>

            </div>



            <button class="bookmarkBtn ma-1" @onclick="StartAddItem">

                <span class="IconContainer">
                    <MudIcon Color="Color.Dark" Icon="@Icons.Material.Outlined.Add"></MudIcon>
                </span>
                <p class="text">Adicionar</p>
            </button>
            <button class="bookmarkBtn ma-1" @onclick="DeleteSelectedItems">
                <span class="IconContainer">
                    <MudIcon Color="Color.Error" Icon="@Icons.Material.Outlined.Delete"></MudIcon>
                </span>
                <p class="text">Deletar</p>
            </button>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>Nome</MudTh>
            <MudTh>Preço</MudTh>
        </HeaderContent>

        <RowTemplate>


            <MudTd DataLabel="Nome">@context.Name</MudTd>
            <MudTd DataLabel="Preço">R$ @context.Price</MudTd>
        </RowTemplate>

        <RowEditingTemplate>
            <MudTd><MudTextField @bind-Value="context.Name" Required Label="Nome do Produto" /></MudTd>
            <MudTd>
                <MudNumericField @bind-Value="context.Price"
                Label="Preço"
                DecimalSeparator=","

                Required="true"
                OnBlur="() => ValidatePrice(context)" />

            </MudTd>
        </RowEditingTemplate>

        <PagerContent>
            <MudTablePager PageSizeOptions="[10, 20, 50, 100]" RowsPerPageString="Produtos por página:" />
        </PagerContent>
    </MudTable>

</MudContainer>






@code {
    private bool _loading;
    private string criterion = "";
    private List<Product> products = new();
    private HashSet<Product> selectedItems = new();
    private MudTable<Product> mudTable;
    public IReadOnlyList<Product> Products => products.AsReadOnly();
    public IReadOnlyCollection<Product> SelectedItems => selectedItems;


    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await LoadProducts();
        _loading = false;
    }

    private async Task LoadProducts()
    {
        try
        {
            products = await ProductService.GetProductsAsync();
        }
        catch (HttpRequestException httpEx) when (httpEx.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            products = new List<Product>(); 
            Snackbar.Add("Nenhum produto encontrado. Adicione um novo produto clicando em \"Adicionar\".", Severity.Warning);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao carregar produtos: " + ex.Message, Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }




    private bool Search(Product produto)
    {
        if (string.IsNullOrWhiteSpace(criterion))
            return true;

        return produto.Name?.Contains(criterion, StringComparison.OrdinalIgnoreCase) == true
               || produto.Price.ToString().Contains(criterion);
    }



    private async Task StartAddItem()
    {
        var options = new DialogOptions { CloseButton = true };
        var dialog = DialogService.Show<DialogAddProduct>("Adicionar produto", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Product newItem)
        {
            await LoadProducts();
        }
    }


    private async void SaveEditionProduct(object productObj)
    {

        var product = productObj as Product;

        bool isValid = await ValidatePrice(product);

        if (isValid)
        {

            try
            {
                if (await ProductService.UpdateProductAsync(product))
                {
                    Snackbar.Add("Produto atualizado com sucesso!", Severity.Success);
                    await LoadProducts();
                }
                else
                {
                    Snackbar.Add("Erro ao atualizar o produto.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exceção ao atualizar produto: {ex.Message}");
            }
        }
    }

    private async void DeleteSelectedItems()
    {
        if(selectedItems.Count > 0){
            foreach (var item in selectedItems)
            {
                await ProductService.DeleteProductAsync(item.Id);
            }
            Snackbar.Add("Produtos deletados com sucesso!", Severity.Success);
            selectedItems.Clear();
        }
        else
        {
            Snackbar.Add("Selecione um produto para deletar!", Severity.Warning);
        }

        await LoadProducts(); // Recarregar os produtos da fonte de dados
        await mudTable.ReloadServerData(); // Recarregar a tabela

    }

    private async Task ReloadTable()
    {
        await mudTable.ReloadServerData(); // Isso vai recarregar os dados
    }


    private async Task<bool> ValidatePrice(Product product)
    {
        if (product == null)
        {
            Snackbar.Add("Produto não encontrado na edição.", Severity.Warning);
            return false;
        }

        if (product.Price < 1)
        {
            Snackbar.Add("O preço não pode ser menor que R$1.", Severity.Warning);
            await LoadProducts();
            return false;
        }

        return true;
    }

}